When you press a key on the keyboard, your computer receives the signals sent by the keyboard and interprets them with the memory it has access to and inputs the command or text. Normally, a computer doesn't have access to Chinese chars in its memory but if you install the software you can use your keyboard to input other languages too.

Computers are big calculators that you input commands to output something magical like a website, app, or game. Inputting like console.log("sandwich"); allows me to output text on the browser. You can even change font and color. Combining small bits of code all working off one another lets you create an experience like no other.
                                                                                                                                                            Softwares can be infinitely reproduced at any time anywhere, the price for accessing them can vary depending wildly. There is competition in this ecosystem but at a certain point, it becomes pointless to resale at a penny of a dollar. Google Drive is free, why would you purchase Mircosoft Office unless required for business. In some cases, it might just be some software has certain aspects that are superior but otherwise, you can make multiple of any software for anything. Taxes, Investment portfolios, video editing, or calenders, the sky is the limit.                                                                                                                        
How code becomes software is by using a compiler to translate word language into machine computing language. The compiler reads and interprets various keywords and chars to figure out what you are coding. Mistakes are a mess, you could have missed a space, forgot a semicolon or your syntax indenting is just off. It can get annoying though that's just the debugging process. Code builds on its self like a big family tree, cutting itself off in bodies and sections branches to branches. You may make a code function to solve one solution but you want to call on that function at any time to solve a different problem. All and all software is just the product of your long strings of codes coming together to produce the fruits of your labor.

Algorithms are just cooler functions by another name. Just like functions algorithms are decided to try to solve a specific problem but in a quick efficient way. Computers applications have to sort through mass amounts of data so it only makes sense you would want to curate this in the best efficient way possible. There is a lot that goes into figuring out how best to curate things and how best computers can answer or match the data given. Computers aren't perfect because people aren't, Google Assistant sadly isn't listening to me, it's trying its best to match up what text it interpreted to its database of searches. Algorithms are helpful though not all are created equal. You could come up with an algorithm that prioritized cats pictures over baby pictures. These a lot that goes into machine learning.

The DRY principle is Don't Repeat Yourself, programmers are lazy they don't want to always be creating similar solutions to similar problems. This principle is ultimately to minimize waste and optimize efficiency. In reality, though programmers repeat tons of code all the time. When designing code its important to think about how to fit it to you or your business needs. 

Object-oriented programming is a filing system for coding which contains data in the form of fields and classes. The principle around object-oriented is all about accessing and reusing code when you need it. You can storage things like names or accounts by calling "public class Customer{}" and that would be an object. You can store anything related to a class which would be Customer and you would put names there to access for later. With this, it is easier for a coworker environment to easily access different codes to modify or build over with peers for different needs.

Data is mass amounts of information, from music, taxes, email addresses, and images. It's all data stored and accessed for our convenience. Programming is all about handling and organizing this "big data" through databases and structures so we can process it all and know what to make of it. Languages like SQL have to make rows and columns that you can make connections to each other through KEYWORDS and ID. This enables you and your peers to work upon and access this mass amount of data easily.

A framework is a helpful aid to developers of apps, websites, and network servers. They make it easier to start an application but don't necessarily give you everything you need to account for when designing it. The intention behind frameworks is DRY, you don't need to reinvent the wheel you can use the wheel for what you need it for instead. This allows you to focus on the higher-level things needed. For some frameworks, there are frameworks in place for emails to verify what a correct email is. Django by entering "EmailField" checks if the email is right and matches the passwords. Frameworks are helpful but some argue they limit the creation process so you can only think about your programs in a certain way. Think of frameworks as a sandbox, it's a box but you can still create a ton with it. 

Debugging is programming in a nutshell, there are always little things you forget or thought would work but aren't.  Debugging is figuring out what made your syntax show some runtime error. It has been joked in many circles of programmers that you become an advanced programmer depending on how much you have googled Stack Overflow or W3 Schools in need of a function.  Some programming languages try to help outline these problems more while others make their language as open as possible so it's not so strict in what it takes in the process of debugging. Debugs are just a part of code, it can be satisfying when you finally figure out what went wrong and figure out how to fix it.

I've always wanted to learn how to code because I always believed technology to be the great equalizer in this world.  I wanted to know what was behind all this rapid technology boom of the internet. It got me curious ever since they started the "Everyone Should Code" campaign in schools. I tried looking into things like Codeacademy and learned about some basics of HTML and CSS. It made me understand a little more about how they build websites, then I decided to take an introduction to computer science class that's where I learned all about JavaScript. That's where it began to become fun to work on projects like web/flash games as pong and snake run. I've always been interested in coding but this field I was very unsure how to get into, I thought I had to get a college degree for anyone to take me seriously, that is what my mother always told me about this career, I might get cheated if I seem inexperienced. When I was in college structure didn't feel like I was focusing on anything. It felt I was it was all focused around taking some big final to decide if you are getting money or paying more, it was just very performative. I just felt alienated from what I was trying to learn. When I found out I didn't need to rely on the university to teach me the skills it was too late. This pandemic happened, I  started working a gig at dominos that takes up too much of my time to learn what I wanted. I am eager for this opportunity because it's my chance to finally take back my future and I'm excited about it. My mother used to be a data administer as well she trained for certifications from Microsoft so she knew her stuff working for telecommunications but she had to stop it all because she was pregnant. It's sad that can end your career. You can't stay those long hours because you have to think about someone else and with so little help. In the end, she became a social worker not really because she wanted to, just because it's the direction she had to go. I would like to think times have changed but there is still a lot of work to do to keep minorities in these fields. I was really surprised to find out my mother was a programmer once, it explained all those books she had on the shelves for one reason. The second reason is it inspired me even more, won't tell her that though.  All in all, I think coding is a remarkable field and I was going to process it regardless if I made it into this program or not, coding truly is a great equalizer.






